<?php

namespace Proxies\__CG__\GEMA\gemaBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Procedimiento extends \GEMA\gemaBundle\Entity\Procedimiento implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', '' . "\0" . 'GEMA\\gemaBundle\\Entity\\Procedimiento' . "\0" . 'id', '' . "\0" . 'GEMA\\gemaBundle\\Entity\\Procedimiento' . "\0" . 'codigo', '' . "\0" . 'GEMA\\gemaBundle\\Entity\\Procedimiento' . "\0" . 'nombre', '' . "\0" . 'GEMA\\gemaBundle\\Entity\\Procedimiento' . "\0" . 'organizacionProductiva', '' . "\0" . 'GEMA\\gemaBundle\\Entity\\Procedimiento' . "\0" . 'tiempoTotal', '' . "\0" . 'GEMA\\gemaBundle\\Entity\\Procedimiento' . "\0" . 'costoTotal', '' . "\0" . 'GEMA\\gemaBundle\\Entity\\Procedimiento' . "\0" . 'otReps', '' . "\0" . 'GEMA\\gemaBundle\\Entity\\Procedimiento' . "\0" . 'ProIns', '' . "\0" . 'GEMA\\gemaBundle\\Entity\\Procedimiento' . "\0" . 'ProHers', '' . "\0" . 'GEMA\\gemaBundle\\Entity\\Procedimiento' . "\0" . 'ProPers', '' . "\0" . 'GEMA\\gemaBundle\\Entity\\Procedimiento' . "\0" . 'acciones', '' . "\0" . 'GEMA\\gemaBundle\\Entity\\Procedimiento' . "\0" . 'ordenTrabajos');
        }

        return array('__isInitialized__', '' . "\0" . 'GEMA\\gemaBundle\\Entity\\Procedimiento' . "\0" . 'id', '' . "\0" . 'GEMA\\gemaBundle\\Entity\\Procedimiento' . "\0" . 'codigo', '' . "\0" . 'GEMA\\gemaBundle\\Entity\\Procedimiento' . "\0" . 'nombre', '' . "\0" . 'GEMA\\gemaBundle\\Entity\\Procedimiento' . "\0" . 'organizacionProductiva', '' . "\0" . 'GEMA\\gemaBundle\\Entity\\Procedimiento' . "\0" . 'tiempoTotal', '' . "\0" . 'GEMA\\gemaBundle\\Entity\\Procedimiento' . "\0" . 'costoTotal', '' . "\0" . 'GEMA\\gemaBundle\\Entity\\Procedimiento' . "\0" . 'otReps', '' . "\0" . 'GEMA\\gemaBundle\\Entity\\Procedimiento' . "\0" . 'ProIns', '' . "\0" . 'GEMA\\gemaBundle\\Entity\\Procedimiento' . "\0" . 'ProHers', '' . "\0" . 'GEMA\\gemaBundle\\Entity\\Procedimiento' . "\0" . 'ProPers', '' . "\0" . 'GEMA\\gemaBundle\\Entity\\Procedimiento' . "\0" . 'acciones', '' . "\0" . 'GEMA\\gemaBundle\\Entity\\Procedimiento' . "\0" . 'ordenTrabajos');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Procedimiento $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setCodigo($codigo)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCodigo', array($codigo));

        return parent::setCodigo($codigo);
    }

    /**
     * {@inheritDoc}
     */
    public function getCodigo()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCodigo', array());

        return parent::getCodigo();
    }

    /**
     * {@inheritDoc}
     */
    public function setNombre($nombre)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNombre', array($nombre));

        return parent::setNombre($nombre);
    }

    /**
     * {@inheritDoc}
     */
    public function getNombre()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNombre', array());

        return parent::getNombre();
    }

    /**
     * {@inheritDoc}
     */
    public function setOrganizacionProductiva($organizacionProductiva)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOrganizacionProductiva', array($organizacionProductiva));

        return parent::setOrganizacionProductiva($organizacionProductiva);
    }

    /**
     * {@inheritDoc}
     */
    public function getOrganizacionProductiva()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOrganizacionProductiva', array());

        return parent::getOrganizacionProductiva();
    }

    /**
     * {@inheritDoc}
     */
    public function setTiempoTotal($tiempoTotal)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTiempoTotal', array($tiempoTotal));

        return parent::setTiempoTotal($tiempoTotal);
    }

    /**
     * {@inheritDoc}
     */
    public function getTiempoTotal()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTiempoTotal', array());

        return parent::getTiempoTotal();
    }

    /**
     * {@inheritDoc}
     */
    public function addOtRep(\GEMA\gemaBundle\Entity\OtRep $otReps)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addOtRep', array($otReps));

        return parent::addOtRep($otReps);
    }

    /**
     * {@inheritDoc}
     */
    public function removeOtRep(\GEMA\gemaBundle\Entity\OtRep $otReps)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeOtRep', array($otReps));

        return parent::removeOtRep($otReps);
    }

    /**
     * {@inheritDoc}
     */
    public function getOtReps()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOtReps', array());

        return parent::getOtReps();
    }

    /**
     * {@inheritDoc}
     */
    public function addProIn(\GEMA\gemaBundle\Entity\ProIns $proIns)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addProIn', array($proIns));

        return parent::addProIn($proIns);
    }

    /**
     * {@inheritDoc}
     */
    public function removeProIn(\GEMA\gemaBundle\Entity\ProIns $proIns)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeProIn', array($proIns));

        return parent::removeProIn($proIns);
    }

    /**
     * {@inheritDoc}
     */
    public function getProIns()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProIns', array());

        return parent::getProIns();
    }

    /**
     * {@inheritDoc}
     */
    public function addProHer(\GEMA\gemaBundle\Entity\ProHer $proHers)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addProHer', array($proHers));

        return parent::addProHer($proHers);
    }

    /**
     * {@inheritDoc}
     */
    public function removeProHer(\GEMA\gemaBundle\Entity\ProHer $proHers)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeProHer', array($proHers));

        return parent::removeProHer($proHers);
    }

    /**
     * {@inheritDoc}
     */
    public function getProHers()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProHers', array());

        return parent::getProHers();
    }

    /**
     * {@inheritDoc}
     */
    public function addProPer(\GEMA\gemaBundle\Entity\ProPer $proPers)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addProPer', array($proPers));

        return parent::addProPer($proPers);
    }

    /**
     * {@inheritDoc}
     */
    public function removeProPer(\GEMA\gemaBundle\Entity\ProPer $proPers)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeProPer', array($proPers));

        return parent::removeProPer($proPers);
    }

    /**
     * {@inheritDoc}
     */
    public function getProPers()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProPers', array());

        return parent::getProPers();
    }

    /**
     * {@inheritDoc}
     */
    public function addAccione(\GEMA\gemaBundle\Entity\Accion $acciones)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addAccione', array($acciones));

        return parent::addAccione($acciones);
    }

    /**
     * {@inheritDoc}
     */
    public function removeAccione(\GEMA\gemaBundle\Entity\Accion $acciones)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeAccione', array($acciones));

        return parent::removeAccione($acciones);
    }

    /**
     * {@inheritDoc}
     */
    public function getAcciones()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAcciones', array());

        return parent::getAcciones();
    }

    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', array());

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function addOrdenTrabajo(\GEMA\gemaBundle\Entity\OrdenTrabajo $ordenTrabajos)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addOrdenTrabajo', array($ordenTrabajos));

        return parent::addOrdenTrabajo($ordenTrabajos);
    }

    /**
     * {@inheritDoc}
     */
    public function removeOrdenTrabajo(\GEMA\gemaBundle\Entity\OrdenTrabajo $ordenTrabajos)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeOrdenTrabajo', array($ordenTrabajos));

        return parent::removeOrdenTrabajo($ordenTrabajos);
    }

    /**
     * {@inheritDoc}
     */
    public function getOrdenTrabajos()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOrdenTrabajos', array());

        return parent::getOrdenTrabajos();
    }

    /**
     * {@inheritDoc}
     */
    public function prePersist()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'prePersist', array());

        return parent::prePersist();
    }

    /**
     * {@inheritDoc}
     */
    public function updateCostoTotal()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'updateCostoTotal', array());

        return parent::updateCostoTotal();
    }

    /**
     * {@inheritDoc}
     */
    public function preUpdate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'preUpdate', array());

        return parent::preUpdate();
    }

    /**
     * {@inheritDoc}
     */
    public function setCostoTotal($costoTotal)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCostoTotal', array($costoTotal));

        return parent::setCostoTotal($costoTotal);
    }

    /**
     * {@inheritDoc}
     */
    public function getCostoTotal()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCostoTotal', array());

        return parent::getCostoTotal();
    }

}
